name: StateStore Test

on:
  push:
    branches: [ main, master, develop ]
  paths:
    - 'fs/statestore/**'
    - 'scripts/build-rocksdb.sh'
    - 'Makefile'
    - '.github/workflows/statestore-test.yml'
  pull_request:
    branches: [ main, master, develop ]
    paths:
      - 'fs/statestore/**'
      - 'scripts/build-rocksdb.sh'
      - 'Makefile'
      - '.github/workflows/statestore-test.yml'
  workflow_dispatch:

jobs:
  test-linux:
    name: Test on Linux
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-type: [pebble, rocksdb]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential git libzstd-dev liblz4-dev libsnappy-dev zlib1g-dev libbz2-dev

      - name: Setup RocksDB (only for rocksdb tests)
        if: matrix.test-type == 'rocksdb'
        run: |
          echo "🔧 检查并安装 RocksDB 依赖..."
          chmod +x scripts/setup-rocksdb-deps.sh
          ./scripts/setup-rocksdb-deps.sh check || echo "依赖检查完成（可能已安装）"
          echo ""
          echo "🔧 安装 RocksDB 到 bin/lib 目录..."
          make setup-rocksdb
          echo "✅ RocksDB 安装完成"
          ls -lh bin/lib/rocksdb/lib/ || echo "检查库文件目录..."

      - name: Test Pebble
        if: matrix.test-type == 'pebble'
        run: make test-statestore

      - name: Test RocksDB
        if: matrix.test-type == 'rocksdb'
        run: make test-statestore-rocksdb

      - name: Build with Pebble
        if: matrix.test-type == 'pebble'
        run: make build

      - name: Build with RocksDB
        if: matrix.test-type == 'rocksdb'
        run: make build-rocksdb

      - name: Verify binary exists
        if: matrix.test-type == 'pebble'
        run: |
          if [ ! -f bin/function-stream ]; then
            echo "❌ Binary not found!"
            exit 1
          fi
          echo "✅ Binary created: bin/function-stream"
          ls -lh bin/function-stream

      - name: Verify RocksDB binary exists
        if: matrix.test-type == 'rocksdb'
        run: |
          if [ ! -f bin/function-stream ]; then
            echo "❌ Binary not found!"
            exit 1
          fi
          echo "✅ Binary created: bin/function-stream"
          ls -lh bin/function-stream
          if [ -f bin/lib/rocksdb/lib/librocksdb.a ]; then
            echo "✅ RocksDB library found"
            ls -lh bin/lib/rocksdb/lib/*.a
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: function-stream-linux-${{ matrix.test-type }}
          path: |
            bin/function-stream
            bin/lib/rocksdb/lib/*.a
          if-no-files-found: ignore
          retention-days: 7

  test-all-statestore:
    name: Test All StateStore Implementations
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential git libzstd-dev liblz4-dev libsnappy-dev zlib1g-dev

      - name: Setup RocksDB
        run: |
          echo "🔧 安装 RocksDB 到 bin/lib 目录..."
          make setup-rocksdb
          echo "✅ RocksDB 安装完成"
          echo "验证安装:"
          ls -lh bin/lib/rocksdb/lib/ || echo "库文件目录不存在"
          ls -lh bin/lib/rocksdb/include/ || echo "头文件目录不存在"

      - name: Test Pebble
        run: make test-statestore

      - name: Test RocksDB
        run: make test-statestore-rocksdb

      - name: Build all variants
        run: |
          make build
          make build-rocksdb

      - name: List build artifacts
        run: |
          echo "=== Build Artifacts ===" 
          find bin -type f -executable 2>/dev/null || true
          echo ""
          echo "=== RocksDB Libraries ==="
          find bin/lib/rocksdb -type f 2>/dev/null || true

      - name: Upload all artifacts
        uses: actions/upload-artifact@v4
        with:
          name: function-stream-linux-complete
          path: |
            bin/
          if-no-files-found: ignore
          retention-days: 7

  summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [test-linux, test-all-statestore]
    if: always()
    steps:
      - name: Generate summary
        run: |
          echo "## 📊 StateStore Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Test Results by Platform" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Platform | StateStore | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|------------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Linux | Pebble | ${{ needs.test-linux.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Linux | RocksDB | ${{ needs.test-linux.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Integration Tests" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Platform | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| All Tests (Linux) | ${{ needs.test-all-statestore.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY

